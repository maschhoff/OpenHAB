//Global Variables

//Bewegung Küche Timer
var Timer timer = null
var boolean timer_stop=false

//Bewegung Flur Timer
var Timer timer2 = null

//Tuer Licht
var Timer timer_tuer = null

//TRADFRIremote toggle
var boolean toggle=false


//TRADFRIremote
rule "TRADFRIremote toggle"
when
    Item TRADFRIremoteaAction changed
then
    val value = transform("JSONPATH", "$.action", TRADFRIremoteaAction.state.toString)
    logInfo("erdgeschoss.rules", "TRADFRIremote "+value)
	
	switch(value){
		case "toggle":
			if(toggle){
				//Switch on
				Erdgeschloss_Switch.sendCommand("ON")
				toggle=false
			}else{
				//Switch off
				Erdgeschloss_Switch.sendCommand("OFF")
				toggle=true
			}
		case "brightness_up_click":{
			//Helligkeit up
			val currentState = (Wohnzimmer_Dimmer.state as Number).intValue
			Wohnzimmer_Dimmer.sendCommand(currentState+10)
			}
		case "brightness_down_click":{
			//Helligkeit down
			val currentState = (Wohnzimmer_Dimmer.state as Number).intValue
			Wohnzimmer_Dimmer.sendCommand(currentState-10)
			}
		case "arrow_right_click":
			logInfo("erdgeschoss.rules", "TRADFRIremote no action on arrow_right_click")
		case "arrow_left_click":
			logInfo("erdgeschoss.rules", "TRADFRIremote no action on arrow_left_click")
	}
end


//Türklingel Push-Nachricht
rule "Tuerklingel"
when Item Bell_String received update
then

	logInfo("erdgeschoss.rules", "Türklingel betätigt!")

	if(Bell_Switch.state==OFF){
		logInfo("erdgeschoss.rules", "Türklingel ausgeschaltet")	
	}else{
    
		logInfo("erdgeschoss.rules", "Türklingel an")
		
		//Pushnotify
		sendNotification("aschhoff@cmais.de", "Türklingel")
		val actions = getActions("pushover", "pushover:pushover-account:account")
		actions.sendMessage("Türklingel","openHAB") 
		

		
		//Cast sound at 50 and play
		CastLRBAD_URI.sendCommand("https://server.little-devil.de/ldp/tuerklingel.mp3")
		CastLRWZ_URI.sendCommand("https://server.little-devil.de/ldp/tuerklingel.mp3")
		CastLRHR_URI.sendCommand("https://server.little-devil.de/ldp/tuerklingel.mp3")
		Badezimmer_LautstRke.sendCommand(50)
		Wohnzimmer_LautstRke.sendCommand(50)
		HobbyraumMini_LautstRke.sendCommand(50)
		Badezimmer_Fernbedienung.sendCommand(PLAY)
		Wohnzimmer_Fernbedienung.sendCommand(PLAY)
		HobbyraumMini_Fernbedienung.sendCommand(PLAY)

		//Ignore for one minute
		Bell_Switch.sendCommand("OFF")
		Timer timer = createTimer(now.plusMinutes(1), [|
				Bell_Switch.sendCommand("ON")
			])
                       

	}
end

//Licht in Kueche und KuechenLeiste anstellen
rule "Licht Kueche dann KuechenLeiste"
when Item Kueche_Helligkeit received update
then
	if(Kueche_Helligkeit.state>0){
		KuechenLeiste.sendCommand("on")
	}else{
		KuechenLeiste.sendCommand("off")
	}
end

//Licht in Küche um 00:00 ausstellen, falls angelassen.
rule "Zeitschaltung_Weihnachtsbeleuchtung_aus"
when Time cron "0 0 0 * * ?" 
then
logInfo("erdgeschoss.rules","Zeitschaltung Küchenlicht OFF")
Kueche_Switch.sendCommand("off")
end


//Flur bewegung
rule "Bewegungsmeldery"
when Item Bewegung_y received command opened
then
logInfo("erdgeschoss.rules","Bewegung Flur")
		logInfo("erdgeschoss.rules", "Flur Infos:"+Sunrise_Number.state+" "+now.getHour)

	//Tagsüber den Bewegungsmelder aktivieren und nachts ignorieren.
	if(now.getHour<23 || now.getHour>6){
		logInfo("erdgeschoss.rules", "Flur ausgelöst:"+Sunrise_Number.state+" "+now.getHour)

		Flur1_Helligkeit.sendCommand(100)
		Flur2_Helligkeit.sendCommand(100)
		
		//Timer mit 5 Minuten danach geht das Licht wieder aus
		if(timer2 === null) {
			logInfo("erdgeschoss.rules","Bewegung_y ON timer2 created")
			timer2 = createTimer(now.plusMinutes(5), [|
				logInfo("erdgeschoss.rules", "Timer2 expired and setting to OFF")
				//wenn der timer2 nicht manuell gestoppt ist...
				Flur1_Helligkeit.sendCommand(0)
				Flur2_Helligkeit.sendCommand(0)
				timer2 = null
			])
		} else {
			logInfo("erdgeschoss.rules", "Timer rescheduled")
			timer2.reschedule(now.plusMinutes(5))
			Flur1_Helligkeit.sendCommand(100)
			Flur2_Helligkeit.sendCommand(100)
		}

	}

	
end

//Generische Regeln für IFTTT / Google Assistant Phrase mit variablen zum Licht ausschalten
rule "Generische Regeln für IFTTT Licht aus"
when Item LightOff_String received update
then

	var auswahl=LightOff_String.state.toString
	logInfo("erdgeschoss.rules", "Licht aus im Raum "+auswahl)
	if(auswahl.contains("Küche")){
		Kueche_Helligkeit.sendCommand(0)
		KuechenLeiste.sendCommand("off")
	}
	if(auswahl.contains("Wohnzimmer")){
		Tisch_Helligkeit.sendCommand(0)
	}
	if(auswahl.contains("Stehlampe")){
		Stehlampe_Helligkeit.sendCommand(0)
	}
	if(auswahl.contains("Tisch")){
		Tisch_Helligkeit.sendCommand(0)
	}
	if(auswahl.contains("Schlafzimmer")){
		Schlafzimmer_Helligkeit.sendCommand(0)
	}
	if(auswahl.contains("Kinderzimmer")){
		Kinderzimmer_Helligkeit.sendCommand(0)
	}
	if(auswahl.contains("Flur")){
		Flur1_Helligkeit.sendCommand(0)
		Flur2_Helligkeit.sendCommand(0)
	}
	if(auswahl.contains("Arbeitszimmer")){
		Arbeitszimmer_Helligkeit.sendCommand(0)
	}
	if(auswahl.contains("Erdgeschoss")){
		Erdgeschloss_Switch.sendCommand(OFF)
	}
end

//Generische Regeln für IFTTT / Google Assistant Phrase mit variablen zum Licht ausschalten
rule "Generische Regeln für IFTTT Licht an"
when Item LightOn_String received update
then

	var auswahl=LightOn_String.state.toString
	var dimmer=100
	logInfo("wohnzimmer.rules", "Licht an/dimmen im Raum "+auswahl)
	
	if(auswahl.contains(":")){
		var split=auswahl.split(":")
		//logInfo("wohnzimmer.rules","String Split: "+split.get(0)+" und "+split.get(1))
		auswahl=split.get(0)
		dimmer=Integer::parseInt(split.get(1))
	}
	
	if(auswahl.contains("Küche")){
		Kueche_Helligkeit.sendCommand(dimmer)
		if(dimmer<40){
			KuechenLeiste.sendCommand("off")
		}else{
			KuechenLeiste.sendCommand("on")
		}
	}
	if(auswahl.contains("Wohnzimmer")){
		Tisch_Helligkeit.sendCommand(dimmer)
		Stehlampe_Helligkeit.sendCommand(dimmer)
	}
	if(auswahl.contains("Stehlampe")){
		Stehlampe_Helligkeit.sendCommand(dimmer)
	}
	if(auswahl.contains("Tisch")){
		Tisch_Helligkeit.sendCommand(dimmer)
	}
	if(auswahl.contains("Schlafzimmer")){
		Schlafzimmer_Helligkeit.sendCommand(dimmer)
	}
	if(auswahl.contains("Kinderzimmer")){
		Kinderzimmer_Helligkeit.sendCommand(dimmer)
	}
	if(auswahl.contains("Flur")){
		Flur1_Helligkeit.sendCommand(dimmer)
		Flur2_Helligkeit.sendCommand(dimmer)
	}
	if(auswahl.contains("Arbeitszimmer")){
		Arbeitszimmer_Helligkeit.sendCommand(dimmer)
	}
	if(auswahl.contains("Erdgeschoss")){
		Erdgeschloss_Switch.sendCommand(ON)
	}
end


//Licht an aus überall
rule "Erdgeschoss Switch Rule"
when Item Erdgeschloss_Switch received update
then
if(Erdgeschloss_Switch.state==ON){
    Tisch_Helligkeit.sendCommand(100)
    Stehlampe_Helligkeit.sendCommand(100)
    Kueche_Helligkeit.sendCommand(100)
    // PILIGHT SWITCHES
    DeskLamp.sendCommand("on")
	KuechenLeiste.sendCommand("on")
	Switch3.sendCommand("on")
	Heizung_WZ.sendCommand("21")
}else{
	//Thread::sleep(10000) // 10 Sekunden warten
	Tisch_Helligkeit.sendCommand(0)
	Stehlampe_Helligkeit.sendCommand(0)
	Kueche_Helligkeit.sendCommand(0)
	// PILIGHT SWITCHES
	KuechenLeiste.sendCommand("off")
	DeskLamp.sendCommand("off")
	Switch3.sendCommand("off")
	Heizung_WZ.sendCommand("17")
	//Flurlicht an
	Flur1_Helligkeit.sendCommand(30)
	Flur2_Helligkeit.sendCommand(30)
	Thread::sleep(500000)
	Flur1_Helligkeit.sendCommand(0)
	Flur2_Helligkeit.sendCommand(0)
	
}
end

//Fernsehr im Wohnzimmer
rule "TV Switch Rule"
when Item TV_Switch received update
then
if(TV_Switch.state==ON){
	Remote_TV.sendCommand("KEY_POWER")
    Tisch_Helligkeit.sendCommand(0)
    Kueche_Helligkeit.sendCommand(0)
	KuechenLeiste.sendCommand("off")
	logInfo("wohnzimmer.rules", "Licht nur nach Sonnenuntergang anschalten - Es ist: "+now.getHourOfDay+" Sonnenuntergang um: "+Integer::parseInt(Sunset_Number.state.toString))
	if(now.getHourOfDay>Integer::parseInt(Sunset_Number.state.toString)){
    	Stehlampe_Helligkeit.sendCommand(30)
	}
}else{
	Remote_TV.sendCommand("KEY_POWER")
	//sendCommand(hisense,ON)
	if(now.getHourOfDay>Integer::parseInt(Sunset_Number.state.toString)){
		Tisch_Helligkeit.sendCommand(80)
		Stehlampe_Helligkeit.sendCommand(80)
	}
}
end


//Licht an aus im Wohnzimmer
rule "Wohnzimmer Switch Rule"
when Item Wohnzimmer_Switch received update
then
if(Wohnzimmer_Switch.state==ON){
    Tisch_Helligkeit.sendCommand(80)
    Stehlampe_Helligkeit.sendCommand(80)
}else{
	Tisch_Helligkeit.sendCommand(0)
	Stehlampe_Helligkeit.sendCommand(0)
}
end

//Gemütlich im Wohnzimmer
rule "Wohnzimmer gemuetlich"
when Item Gemuetlich_Switch received update
then
Tisch_Helligkeit.sendCommand(20)
Stehlampe_Helligkeit.sendCommand(30)
Kueche_Helligkeit.sendCommand(0)
Tisch_Farbtemperatur.sendCommand(100)
Stehlampe_Farbtemperatur.sendCommand(100)
end

//Putzen im Wohnzimmer
rule "Wohnzimmer gemuetlich"
when Item Putzen_Switch received update
then
Tisch_Helligkeit.sendCommand(100)
Stehlampe_Helligkeit.sendCommand(100)
Kueche_Helligkeit.sendCommand(100)
Tisch_Farbtemperatur.sendCommand(0)
Stehlampe_Farbtemperatur.sendCommand(0)
end

//Licht an wenn Tür auf
rule "Tuer auf Licht an"
when Item Tuer received command opened
then 
    logInfo("Erdgeschoss.rules", "Tuer wurde geöffnet")
	if(Sunset_Number.state===null || now.getHour+1>=Integer::parseInt(Sunset_Number.state.toString) || now.getHour<=Integer::parseInt(Sunrise_Number.state.toString)){ 
			sendCommand(Flur1_Helligkeit,100)
			sendCommand(Flur2_Helligkeit,100)
	}
	
	
	//Timer
	if(timer_tuer === null) {
		logInfo("erdgeschoss.rules","Tuer ON timer created")
        timer_tuer = createTimer(now.plusMinutes(5), [|
            logInfo("erdgeschoss.rules", "Tuer Timer expired and setting to OFF")
			sendCommand(Flur1_Helligkeit,0)
			sendCommand(Flur2_Helligkeit,0)
            timer_tuer = null
        ])
	} else {
        logInfo("erdgeschoss.rules", "Tuer Timer rescheduled")
        timer_tuer.reschedule(now.plusMinutes(5))
    }
	
end


rule "Bewegungsmelderx"
when Item Bewegung_x received command
then
//logInfo("erdgeschoss.rules","Bewegung Küche")
	//logInfo("erdgeschoss.rules", "Infos:"+Sunrise_Number.state+" "+now.getHourOfDay)
	//if(Sunset_Number.state===null || now.getHourOfDay+1>=Integer::parseInt(Sunset_Number.state.toString) || now.getHourOfDay<=Integer::parseInt(Sunrise_Number.state.toString)){ 
		Kueche_Helligkeit.sendCommand(100)
		KuechenLeiste.sendCommand("on")
	//}
	if(timer === null) {
		//logInfo("erdgeschoss.rules","Bewegung_x ON timer created")
        timer = createTimer(now.plusMinutes(2), [|
            //logInfo("erdgeschoss.rules", "Timer expired and setting to OFF")
			//wenn der timer nicht manuell gestoppt ist...
			if(!timer_stop){
				Kueche_Helligkeit.sendCommand(0)
				KuechenLeiste.sendCommand("off")
			}
            timer = null
        ])
	} else {
        //logInfo("erdgeschoss.rules", "Timer rescheduled")
        timer.reschedule(now.plusMinutes(2))
		Kueche_Helligkeit.sendCommand(100)
		KuechenLeiste.sendCommand("on")
    }
end


//Licht an aus in der Kueche
rule "Kueche Switch Rule"
when Item Kueche_Switch received update
then
if(Kueche_Switch.state==ON){
	timer_stop=true
    Kueche_Helligkeit.sendCommand(100)
	KuechenLeiste.sendCommand("on")
}else{
	timer_stop=false
	Kueche_Helligkeit.sendCommand(0)
	KuechenLeiste.sendCommand("off")
}
end

//Licht an aus im Flur
rule "Flur Switch Rule"
when Item Flur_Switch received update
then
if(Flur_Switch.state==ON){
	Flur1_Helligkeit.sendCommand(100)
	Flur2_Helligkeit.sendCommand(100)
}else{
	Flur1_Helligkeit.sendCommand(0)
	Flur2_Helligkeit.sendCommand(0)
}
end


//Licht dimmen in der Kueche
rule "Kueche Dimmer Rule"
when Item Kueche_Dimmer received command
then
	val newState = Kueche_Dimmer.state
	logInfo("wohnzimmer.rules", "Kueche_Dimmer zu "+newState)
	sendCommand(Kueche_Helligkeit,newState.toString)
	if(newState<50){ 
		KuechenLeiste.sendCommand("off")
	}
end


//Licht dimmen im Flur
rule "Flur Dimmer Rule"
when Item Flur_Dimmer received command
then
	val newState = Flur_Dimmer.state
	logInfo("wohnzimmer.rules", "Flur_Dimmer zu "+newState)
	sendCommand(Flur1_Helligkeit,newState.toString)
	sendCommand(Flur2_Helligkeit,newState.toString)
end

//Licht dimmen im Wohnzimmer
rule "Wohnzimmer Dimmer Rule"
when Item Wohnzimmer_Dimmer received command
then
	val newState = Wohnzimmer_Dimmer.state
	logInfo("wohnzimmer.rules", "Wonzimmer_Dimmer zu "+newState)
	sendCommand(Tisch_Helligkeit,newState.toString)
	sendCommand(Stehlampe_Helligkeit,newState.toString)
end

//Licht farbe im Wohnzimmer
rule "Wohnzimmer Dimmer Farbe Rule"
when Item Wohnzimmer_Farbe_Dimmer received command
then
	val newState = Wohnzimmer_Farbe_Dimmer.state
	logInfo("wohnzimmer.rules", "Wonzimmer_Dimmer zu "+newState)
	sendCommand(Tisch_Farbtemperatur,newState.toString)
	sendCommand(Stehlampe_Farbtemperatur,newState.toString)
end


